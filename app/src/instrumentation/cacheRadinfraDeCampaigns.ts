import { exec } from 'child_process'
import fs from 'fs/promises'
import path from 'path'
import { promisify } from 'util'
import { isDev } from '../app/_components/utils/isEnv'
import { radinfraDeCampaignSchema } from '../app/regionen/(index)/_data/radinfraDeCampaignSchema'
import { greenCheckmark } from './_utils/greenCheckmark'

const url = 'https://radinfra.de/api/campaigns.json'

export const cacheRadinfraDeCampaigns = async () => {
  try {
    const response = await fetch(url)
    if (!response.ok) {
      throw new Error(`HTTP error! Status: ${response.status}`)
    }
    const json = await response.json()
    const parsed = radinfraDeCampaignSchema.parse(json)
    const sorted = parsed.sort((c1, c2) => c1.id.localeCompare(c2.id))

    const data = `
// DO NOT EDIT MANUALLY
// This file was automatically generated by \`app/src/instrumentation/cacheRadinfraDeCampaigns.ts\`
// To update, restart the server to trigger the instrumentation

import { RadinfraDeCampaignSchema } from './radinfraDeCampaignSchema'

export const radinfraDeCampaigns: RadinfraDeCampaignSchema[] = ${JSON.stringify(sorted, undefined, 2)}
`

    const filePath = path.resolve(
      __dirname,
      '../../src/app/regionen/(index)/_data/radinfraDeCampaigns.generated.const.ts',
    )
    await fs.writeFile(filePath, data.trim(), 'utf8')

    if (isDev) {
      // On Dev, where we check the file in, we make sure it is formatted nicely.
      const execAsync = promisify(exec)
      await execAsync(`npx prettier --write "${filePath}"`)
    }

    console.log(greenCheckmark, 'radinfra.de Campaign data updated')
  } catch (error) {
    console.error(
      '\x1b[31m%s\x1b[0m',
      'INSTRUMENTATION HOOK FAILED',
      'cacheRadinfraDeCampaigns',
      error,
    )
  }
}
