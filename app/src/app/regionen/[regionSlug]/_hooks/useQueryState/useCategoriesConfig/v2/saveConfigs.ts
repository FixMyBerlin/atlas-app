#!/usr/bin/env bun

// This script generates the files `./_{checksum}.ts` and `./index.ts`
// don't run it directly but use `npm run save-configs` which run prettier after code generation

import fs from 'node:fs'
import path from 'node:path'
import { getSimplifiedConfigs } from './lib'

const configsFolder = path.join(import.meta.dir, 'configs')

const resultIntro = `
// DO NOT EDIT MANUALLY
// This file was automatically generated by \`${import.meta.file}\`
`

getSimplifiedConfigs().forEach(({ config, regionSlugs }, checksum) => {
  const moduleName = `_${checksum}`
  const modulePath = path.join(configsFolder, `${moduleName}.ts`)
  const result = `${resultIntro}
import { MapDataCategoryParam } from '../../type'

// For regions ${regionSlugs.join(', ')}
export const ${moduleName}: MapDataCategoryParam[] = ${JSON.stringify(config)}
    `
  Bun.write(modulePath, result)
  console.log(`Updated ${modulePath}...`)
})

const configModules = fs
  .readdirSync(configsFolder)
  .filter((filename) => !filename.startsWith('index'))
  .map((filename) => filename.split('.')[0])
  .sort()

const importCode = configModules
  .map((filename) => {
    return `import { ${filename} } from './${filename}'`
  })
  .join('\n')

const result = `${resultIntro}

${importCode}

export const configs = {
  ${configModules.map((filename) => {
    return `"${filename!.slice(1)}": ${filename}`
  })}
}
`
const modulePath = path.join(configsFolder, 'index.ts')
Bun.write(modulePath, result)
console.log(`Updated ${modulePath}...`)
