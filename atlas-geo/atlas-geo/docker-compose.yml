version: "3"
services:
  app:
    image: public.ecr.aws/n0p8j4k5/atlas/app:${GITHUB_SHA}
    entrypoint: /app/run.sh
    container_name: app
    environment:
      PGHOST: 
      PGDATABASE:
      PGUSER:
      PGPASSWORD:
      SKIP_DOWNLOAD:
      SKIP_TAG_FILTER:
      OSM_DOWNLOAD_URL:
    volumes:
      - osmfiles:/data
    networks:
      - app_bridge
    depends_on:
      db:
        condition: service_healthy
  tiles:
    # There is no Apple M1 ARM 64 build, see https://github.com/CrunchyData/pg_tileserv/issues/127
    image: pramsey/pg_tileserv
    container_name: tiles
    restart: always
    environment:
      NODE_ENV: production
      DATABASE_URL: postgres://${PGUSER}:${PGPASSWORD}@${PGHOST}/${PGDATABASE}
    ports:
      - "8010:7800"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.tiles.rule=Host(`${TILES_URL}`)"
      - "traefik.http.routers.tiles.entrypoints=websecure"
      - "traefik.http.routers.tiles.tls.certresolver=letsencrypt"
      - "traefik.http.routers.tiles.tls=true"
    networks:
      - app_bridge
    depends_on:
      db:
        condition: service_healthy
  api:
    image: public.ecr.aws/n0p8j4k5/atlas/api:${GITHUB_SHA}
    container_name: api
    environment:
      PGHOST: 
      PGDATABASE:
      PGUSER:
      PGPASSWORD:
    restart: always
    ports:
      - "8020:80"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.api.rule=Host(`${API_URL}`)"
      - "traefik.http.routers.api.entrypoints=websecure"
      - "traefik.http.routers.api.tls.certresolver=letsencrypt"
      - "traefik.http.routers.api.tls=true"
    networks:
      - app_bridge
    depends_on:
      db:
        condition: service_healthy
  db:
    # There is no Apple M1 ARM 64 build, see https://github.com/postgis/docker-postgis/issues/216
    image: postgis/postgis:14-3.3-alpine
    environment:
      PGUSER:
      PGDATABASE:
      POSTGRES_DB: ${PGDATABASE}
      POSTGRES_PASSWORD: ${PGPASSWORD}
      LANG: en_US.UTF-8
      LC_ALL: en_US.UTF-8
    ports:
      - "5432:5432"
    volumes:
      - geodata:/var/lib/postgresql/data
    container_name: db
    healthcheck:
      test: ["CMD-SHELL", "pg_isready"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - app_bridge
volumes:
  osmfiles:
  geodata:
networks:
  app_bridge:
