name: Deploy to IONOS

on:
  workflow_call:
    secrets:
      SERVICE_NAME:
        required: true
      DATABASE_NAME:
        required: true
      DATABASE_PASSWORD:
        required: true
      DATABASE_USER:
        required: true
      DATABASE_PASSWORD_ENCODED:
        required: true
      AWS_ACCESS_KEY_ID:
        required: true
      AWS_SECRET_ACCESS_KEY:
        required: true
      AWS_REGION:
        required: true
      SSH_USERNAME:
        required: true
      SSH_PASSWORD:
        required: true
      SSH_HOST:
        required: true
      SYNOLOGY_LOG_TOKEN:
        required: true
      SYNOLOGY_ERROR_LOG_TOKEN:
        required: true
    inputs:
      ENVIRONMENT:
        type: string
        required: true
      TILES_URL:
        type: string
        required: true

jobs:
  build_and_deploy:
    runs-on: ubuntu-latest
    environment:
      name: ${{ inputs.ENVIRONMENT }}
      url: https://${{ inputs.URL }}
    steps:
      - uses: actions/checkout@v4

      - name: Upgrade AWS CLI version and setup lightsailctl
        run: |
          aws --version
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          unzip awscliv2.zip
          sudo ./aws/install --bin-dir /usr/local/bin --install-dir /usr/local/aws-cli --update
          which aws
          aws --version
          sudo curl "https://s3.us-west-2.amazonaws.com/lightsailctl/latest/linux-amd64/lightsailctl" -o "/usr/local/bin/lightsailctl"
          sudo chmod +x /usr/local/bin/lightsailctl

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Setup buildx
        uses: docker/setup-buildx-action@v3

      - name: Build app image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./app.Dockerfile
          push: false
          load: true
          cache-from: type=gha
          cache-to: type=gha,mode=max
          tags: public.ecr.aws/n0p8j4k5/atlas/app:${{ github.sha }}

      - name: Push the app image
        run: |
          aws ecr-public get-login-password --region us-east-1 | docker login --username AWS --password-stdin public.ecr.aws/n0p8j4k5/
          docker push public.ecr.aws/n0p8j4k5/atlas/app:${{ github.sha }}

      - name: Copy files to server
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          password: ${{ secrets.SSH_PASSWORD }}
          source: "docker-compose.yml,docker-compose.traefik.yml,postgres/postgres.conf,configs/nginx.conf"
          target: "/srv/processing/"
          overwrite: true

      - name: Stop & Start containers on VPS
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          password: ${{ secrets.SSH_PASSWORD }}
          script: |
            cd /srv/processing/
            echo "Updating '.env'"
            rm .env
            touch .env
            echo PGHOST='${{ vars.DATABASE_HOST }}' >> .env
            echo ENVIRONMENT='${{ inputs.ENVIRONMENT }}' >> .env
            echo SYNOLOGY_LOG_TOKEN='${{ secrets.SYNOLOGY_LOG_TOKEN }}' >> .env
            echo SYNOLOGY_ERROR_LOG_TOKEN='${{ secrets.SYNOLOGY_ERROR_LOG_TOKEN }}' >> .env
            echo PGUSER='${{ secrets.DATABASE_USER }}' >> .env
            echo PGPASSWORD='${{ secrets.DATABASE_PASSWORD }}' >> .env
            echo PGDATABASE='${{ secrets.DATABASE_NAME }}' >> .env
            echo OSM_DOWNLOAD_URL='${{ vars.OSM_DOWNLOAD_URL }}' >> .env
            echo TILES_URL='${{ inputs.TILES_URL }}' >> .env
            echo GITHUB_SHA='${{ github.sha }}' >> .env
            echo "Reload containers"
            docker compose pull
            docker compose up -d
            docker image prune -fa
