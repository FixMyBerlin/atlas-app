name: Deploy to Ionos
on:
  workflow_call:
    inputs:
      ENVIRONMENT:
        required: true
        type: string
      NEXT_PUBLIC_APP_ORIGIN:
        required: true
        type: string
      NEXT_PUBLIC_APP_ENV:
        required: true
        type: string
      NEXT_PUBLIC_OSM_API_URL:
        required: true
        type: string
      TRAEFIK_HOST:
        required: true
        type: string
    secrets:
      # REMINDER: Public keys `NEXT_PUBLIC_*` have to be added to `/Dockerfile` as well
      AWS_ACCESS_KEY_ID:
        required: true
      AWS_SECRET_ACCESS_KEY:
        required: true
      DATABASE_URL:
        required: true
      SESSION_SECRET_KEY:
        required: true
      OSM_CLIENT_ID:
        required: true
      OSM_CLIENT_SECRET:
        required: true
      SSH_HOST:
        required: true
      SSH_PASSWORD:
        required: true
      SSH_USERNAME:
        required: true
      ATLAS_API_KEY:
        required: true
      S3_KEY:
        required: true
      S3_SECRET:
        required: true
      S3_REGION:
        required: true
      S3_BUCKET:
        required: true

jobs:
  build-push-deploy-docker-images:
    runs-on: ubuntu-latest
    environment:
      name: ${{ inputs.ENVIRONMENT }}
    steps:
      - uses: actions/checkout@v4

      - name: Upgrade AWS CLI version and setup lightsailctl
        run: |
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          unzip awscliv2.zip
          sudo ./aws/install --bin-dir /usr/local/bin --install-dir /usr/local/aws-cli --update
          sudo curl "https://s3.us-west-2.amazonaws.com/lightsailctl/latest/linux-amd64/lightsailctl" -o "/usr/local/bin/lightsailctl"
          sudo chmod +x /usr/local/bin/lightsailctl

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-central-1

      - name: Setup buildx
        uses: docker/setup-buildx-action@v3

      - name: Build app image
        uses: docker/build-push-action@v5
        with:
          file: ./app.Dockerfile
          push: false
          load: true
          cache-from: type=gha
          cache-to: type=gha,mode=max
          tags: public.ecr.aws/n0p8j4k5/atlas/blitz:${{ github.sha }}
          build-args: |
            NEXT_PUBLIC_APP_ENV=${{ inputs.NEXT_PUBLIC_APP_ENV }}
            NEXT_PUBLIC_APP_ORIGIN=${{ inputs.NEXT_PUBLIC_APP_ORIGIN }}
            NEXT_PUBLIC_OSM_API_URL=${{ inputs.NEXT_PUBLIC_OSM_API_URL }}

      - name: Push image
        run: |
          echo push public.ecr.aws/n0p8j4k5/atlas/blitz:${{ github.sha }}
          aws ecr-public get-login-password --region us-east-1 | docker login --username AWS --password-stdin public.ecr.aws/n0p8j4k5/
          docker push public.ecr.aws/n0p8j4k5/atlas/blitz:${{ github.sha }}

      - name: Copy files to server
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          password: ${{ secrets.SSH_PASSWORD }}
          source: 'docker/docker-compose.yml'
          target: '/srv/blitz'
          strip_components: 1
          overwrite: true

      - name: Stop & Start container on Server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          password: ${{ secrets.SSH_PASSWORD }}
          script: |
            cd /srv/blitz/
            echo "Updating '.env'"
            echo GITHUB_SHA='${{ github.sha }}' > .env
            echo NEXT_PUBLIC_APP_ORIGIN='${{ inputs.NEXT_PUBLIC_APP_ORIGIN }}' >> .env
            echo NEXT_PUBLIC_APP_ENV='${{ inputs.NEXT_PUBLIC_APP_ENV }}' >> .env
            echo TRAEFIK_HOST='${{ inputs.TRAEFIK_HOST }}' >> .env
            echo DATABASE_URL='${{ secrets.DATABASE_URL }}' >> .env
            echo SESSION_SECRET_KEY='${{ secrets.SESSION_SECRET_KEY }}' >> .env
            echo OSM_CLIENT_ID='${{ secrets.OSM_CLIENT_ID }}' >> .env
            echo OSM_CLIENT_SECRET='${{ secrets.OSM_CLIENT_SECRET }}' >> .env
            echo NEXT_PUBLIC_OSM_API_URL='${{ inputs.NEXT_PUBLIC_OSM_API_URL }}' >> .env
            echo ATLAS_API_KEY='${{ secrets.ATLAS_API_KEY }}' >> .env
            echo S3_KEY='${{ secrets.S3_KEY }}' >> .env
            echo S3_SECRET='${{ secrets.S3_SECRET }}' >> .env
            echo S3_REGION='${{ secrets.S3_REGION }}' >> .env
            echo S3_BUCKET='${{ secrets.S3_BUCKET }}' >> .env
            docker compose up -d
            docker image prune -fa
            sleep 10
            curl http://localhost:3000 > /dev/null
