name: Deploy App to Ionos
on:
  workflow_call:
    inputs:
      ENVIRONMENT:
        required: true
        type: string
      NEXT_PUBLIC_APP_ORIGIN:
        required: true
        type: string
      NEXT_PUBLIC_APP_ENV:
        required: true
        type: string
      NEXT_PUBLIC_OSM_API_URL:
        required: true
        type: string
      APP_URL:
        required: true
        type: string

jobs:
  check_changes_app:
    uses: ./.github/workflows/diff-last-run.yml
    with:
      CHECK_DIFF_LOCATIONS: app/ app.Dockerfile
  build_and_deploy_app:
    needs: check_changes_app
    if: ${{ needs.check_changes_app.outputs.changes }} == 'true'
    runs-on: ubuntu-latest
    environment:
      name: ${{ inputs.ENVIRONMENT }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Upgrade AWS CLI version and setup lightsailctl
        run: |
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          unzip awscliv2.zip
          sudo ./aws/install --bin-dir /usr/local/bin --install-dir /usr/local/aws-cli --update
          sudo curl "https://s3.us-west-2.amazonaws.com/lightsailctl/latest/linux-amd64/lightsailctl" -o "/usr/local/bin/lightsailctl"
          sudo chmod +x /usr/local/bin/lightsailctl

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      - name: Setup buildx
        uses: docker/setup-buildx-action@v3

      - name: Build app image
        uses: docker/build-push-action@v5
        with:
          file: ./app.Dockerfile
          context: ./
          push: false
          load: true
          cache-from: type=gha
          cache-to: type=gha,mode=max
          tags: |
            public.ecr.aws/n0p8j4k5/atlas/blitz:${{ github.sha }}
            public.ecr.aws/n0p8j4k5/atlas/blitz:${{ inputs.ENVIRONMENT }}-latest
          build-args: |
            NEXT_PUBLIC_APP_ENV=${{ inputs.NEXT_PUBLIC_APP_ENV }}
            NEXT_PUBLIC_APP_ORIGIN=${{ inputs.NEXT_PUBLIC_APP_ORIGIN }}
            NEXT_PUBLIC_OSM_API_URL=${{ inputs.NEXT_PUBLIC_OSM_API_URL }}

      - name: Push image
        run: |
          aws ecr-public get-login-password --region us-east-1 | docker login --username AWS --password-stdin public.ecr.aws/n0p8j4k5/
          docker push --all-tags public.ecr.aws/n0p8j4k5/atlas/blitz

      - name: Copy files to server
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          password: ${{ secrets.SSH_PASSWORD }}
          source: "app/docker/docker-compose.yml"
          target: "/srv"
          strip_components: 2
          overwrite: true

      - name: Stop & Start container on Server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          password: ${{ secrets.SSH_PASSWORD }}
          script: |
            cd /srv
            echo "Updating `.env`"
            sed -i \
              -e "s|^NEXT_PUBLIC_APP_ORIGIN=.*$|NEXT_PUBLIC_APP_ORIGIN='${{ inputs.NEXT_PUBLIC_APP_ORIGIN }}'|"\
              -e "s|^NEXT_PUBLIC_APP_ENV=.*$|NEXT_PUBLIC_APP_ENV='${{ inputs.NEXT_PUBLIC_APP_ENV }}'|" \
              -e "s|^APP_URL=.*$|APP_URL='${{ inputs.APP_URL }}'|" \
              -e "s|^DATABASE_HOST=.*$|DATABASE_HOST='${{ vars.DATABASE_HOST }}'|" \
              -e "s|^DATABASE_USER=.*$|DATABASE_USER='${{ secrets.DATABASE_USER }}'|" \
              -e "s|^DATABASE_PASSWORD=.*$|DATABASE_PASSWORD='${{ secrets.DATABASE_PASSWORD }}'|" \
              -e "s|^DATABASE_NAME=.*$|DATABASE_NAME='${{ secrets.DATABASE_NAME }}'|" \
              -e "s|^SESSION_SECRET_KEY=.*$|SESSION_SECRET_KEY='${{ secrets.SESSION_SECRET_KEY }}'|" \
              -e "s|^OSM_CLIENT_ID=.*$|OSM_CLIENT_ID='${{ secrets.OSM_CLIENT_ID }}'|" \
              -e "s|^OSM_CLIENT_SECRET=.*$|OSM_CLIENT_SECRET='${{ secrets.OSM_CLIENT_SECRET }}'|" \
              -e "s|^NEXT_PUBLIC_OSM_API_URL=.*$|NEXT_PUBLIC_OSM_API_URL='${{ inputs.NEXT_PUBLIC_OSM_API_URL }}'|" \
              -e "s|^ATLAS_API_KEY=.*$|ATLAS_API_KEY='${{ secrets.ATLAS_API_KEY }}'|" \
              -e "s|^S3_KEY=.*$|S3_KEY='${{ secrets.S3_KEY }}'|" \
              -e "s|^S3_SECRET=.*$|S3_SECRET='${{ secrets.S3_SECRET }}'|" \
              -e "s|^S3_REGION=.*$|S3_REGION='${{ secrets.S3_REGION }}'|" \
              -e "s|^S3_BUCKET=.*$|S3_BUCKET='${{ secrets.S3_BUCKET }}'|" \
              .env
            echo "Restarting container `app`"
            docker compose --profile frontend up app -d
            docker image prune -fa
            sleep 10
            curl http://localhost:4000 > /dev/null
