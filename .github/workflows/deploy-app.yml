name: Deploy App to Ionos
on:
  workflow_call:
    inputs:
      ENVIRONMENT:
        required: true
        type: string
      NEXT_PUBLIC_APP_ORIGIN:
        required: true
        type: string
      NEXT_PUBLIC_APP_ENV:
        required: true
        type: string
      NEXT_PUBLIC_OSM_API_URL:
        required: true
        type: string
      APP_URL:
        required: true
        type: string
      CONFIG_CHANGED:
        required: true
        type: boolean

jobs:
  diff_app:
    uses: ./.github/workflows/diff-last-run.yml
    with:
      CHECK_DIFF_LOCATIONS: app/ app.Dockerfile
  build_app:
    runs-on: ubuntu-latest
    needs: diff_app
    if: ${{ needs.diff_app.outputs.changes == 'true' }}
    environment:
      name: ${{ inputs.ENVIRONMENT }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Upgrade AWS CLI version and setup lightsailctl
        run: |
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          unzip awscliv2.zip
          sudo ./aws/install --bin-dir /usr/local/bin --install-dir /usr/local/aws-cli --update
          sudo curl "https://s3.us-west-2.amazonaws.com/lightsailctl/latest/linux-amd64/lightsailctl" -o "/usr/local/bin/lightsailctl"
          sudo chmod +x /usr/local/bin/lightsailctl

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      - name: Setup buildx
        uses: docker/setup-buildx-action@v3

      - name: Build app image
        uses: docker/build-push-action@v6
        with:
          file: ./app.Dockerfile
          context: ./
          push: false
          load: true
          cache-from: type=gha
          cache-to: type=gha,mode=max
          tags: |
            public.ecr.aws/n0p8j4k5/atlas/app:${{ github.sha }}
            public.ecr.aws/n0p8j4k5/atlas/app:${{ inputs.ENVIRONMENT }}-latest
          build-args: |
            NEXT_PUBLIC_APP_ENV=${{ inputs.NEXT_PUBLIC_APP_ENV }}
            NEXT_PUBLIC_APP_ORIGIN=${{ inputs.NEXT_PUBLIC_APP_ORIGIN }}
            NEXT_PUBLIC_OSM_API_URL=${{ inputs.NEXT_PUBLIC_OSM_API_URL }}

      - name: Push image
        run: |
          aws ecr-public get-login-password --region us-east-1 | docker login --username AWS --password-stdin public.ecr.aws/n0p8j4k5/
          docker push --all-tags public.ecr.aws/n0p8j4k5/atlas/app
  restart_app:
    runs-on: ubuntu-latest
    needs: [diff_app, build_app]
    if: ${{ needs.diff_app.outputs.changes == 'true' || inputs.CONFIG_CHANGED && always() }}
    environment:
      name: ${{ inputs.ENVIRONMENT }}
      url: https://${{ inputs.APP_URL }}
    steps:
      - name: Stop & Start container on Server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          password: ${{ secrets.SSH_PASSWORD }}
          script: |
            cd /srv
            echo "Pulling latest 'app' image"
            docker compose pull app
            echo "Restarting 'app' container"
            docker compose up app -d
            echo "Pruning images"
            docker image prune -fa
