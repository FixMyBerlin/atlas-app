// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// This is an optional zod helper script:
// It will generate zod schemas based on this prisma-schema in `/db/zod-schema-inspiration`
// We can use those, to improve our own zod schema files.
// However, we cannot have this active all the time, due to an issue with blitz.
// How to use:
// 1. Remove comment below
// 2. Use `npx blitz prisma generate` (mind the `x`)
// 3. Copy what you need to your own schema
// 4. Revert (1)
//
// generator zod {
//   provider                 = "zod-prisma"
//   output                   = "./zod-schema-inspiration"
//   relationModel            = true
//   modelCase                = "PascalCase"
//   modelSuffix              = "Model"
//   useDecimalJs             = true
//   imports                  = null
//   prismaJsonNullability    = true
// }

// --------------------------------------

model User {
  id             Int          @id @default(autoincrement())
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  //
  osmId          Int          @unique
  osmName        String?
  osmDescription String?
  osmAvatar      String?
  hashedPassword String?
  role           UserRoleEnum @default(USER)
  email          String?      @unique
  firstName      String?
  lastName       String?
  //
  tokens         Token[]
  sessions       Session[]
  Membership     Membership[]
}

enum UserRoleEnum {
  USER
  ADMIN
}

model Session {
  id                 Int       @id @default(autoincrement())
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  //
  expiresAt          DateTime?
  handle             String    @unique
  hashedSessionToken String?
  antiCSRFToken      String?
  publicData         String?
  privateData        String?
  //
  user               User?     @relation(fields: [userId], references: [id])
  userId             Int?
}

model Token {
  id          Int       @id @default(autoincrement())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  //
  hashedToken String
  type        TokenType
  expiresAt   DateTime
  sentTo      String
  //
  user        User      @relation(fields: [userId], references: [id])
  userId      Int

  @@unique([hashedToken, type])
}

enum TokenType {
  RESET_PASSWORD
}

model BikelaneVerification {
  id          Int      @id @default(autoincrement())
  //
  osm_type    String   @db.VarChar
  osm_id      String
  verified_at DateTime @default(now())
  verified_by BigInt?
  verified    String
  comment     String?
}

model Region {
  id           Int      @id @default(autoincrement())
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  //
  slug         String   @unique
  public       Boolean  @default(false)
  exportPublic Boolean  @default(false)

  Membership Membership[]
  uploads    Upload[]
}

model Membership {
  id Int @id @default(autoincrement())

  user   User @relation(fields: [userId], references: [id])
  userId Int

  region   Region @relation(fields: [regionId], references: [id])
  regionId Int

  @@unique([regionId, userId])
}

model Upload {
  id        Int                 @id @default(autoincrement())
  createdAt DateTime            @default(now())
  createdBy UploadCreatedByEnum @default(SCRIPT)
  updatedAt DateTime            @updatedAt
  //
  slug      String              @unique
  type      UploadTypeEnum      @default(PMTILES)
  url       String
  configs   Json
  public    Boolean             @default(false)
  //
  regions   Region[]
}

enum UploadCreatedByEnum {
  USER
  SCRIPT
}

enum UploadTypeEnum {
  GEOJSON
  PMTILES
}
