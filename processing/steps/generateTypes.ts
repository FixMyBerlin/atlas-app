import { $ } from 'bun'
import { join } from 'path'
import { TYPES_DIR } from '../constants/directories.const'
import { params } from '../utils/parameters'

/**
 * Generate types based on the processing tables.
 * @param processedTables the list of tables to include in the type
 */
export async function generateTypes(processedTables: string[]) {
  // Only generate type when in development
  if (params.environment !== 'development') return

  console.log('Generating types...')

  writeTableIdTypes(processedTables)
  writeTodoIdTypes()

  autoformatTypeFiles()
}

async function writeTableIdTypes(processedTables: string[]) {
  const typeFilePath = join(TYPES_DIR, 'tableId.generated.const.ts')
  const typeFile = Bun.file(typeFilePath)

  const fileContent = `export type TableId = ${
    processedTables
      .sort()
      .map((tableName) => `'${tableName}'`)
      .join(' | ') || 'ERROR'
  }`

  const content = prefixGeneratedFiles(fileContent)
  await Bun.write(typeFile, content)
}

async function callLuaForNames(luaFilename: 'ExtractBikelaneTodos' | 'ExtractRoadTodos') {
  try {
    const names = await $`lua /processing/utils/types/${luaFilename}.lua`
      .text()
      .then((names) => names.split('\n').filter(Boolean).sort())
    return names
  } catch (error) {
    throw new Error(`Failed to get names for "${luaFilename}": ${error}`)
  }
}

async function writeTodoIdTypes() {
  const typeFilePath = join(TYPES_DIR, 'todoId.generated.const.ts')
  const typeFile = Bun.file(typeFilePath)

  const bikelaneTodoNames = await callLuaForNames('ExtractBikelaneTodos')
  const roadTodoNames = await callLuaForNames('ExtractRoadTodos')

  const fileContent = `
  export const bikelaneTodoIds = [${bikelaneTodoNames.map((name) => `'${name}'`).join(',')}] as const
  export type BikelaneTodoId = (typeof bikelaneTodoIds)[number]

  export const roadTodoIds = [${roadTodoNames.map((name) => `'${name}'`).join(',')}] as const
  export type RoadTodoId = (typeof roadTodoIds)[number]
  `

  const content = prefixGeneratedFiles(fileContent)
  await Bun.write(typeFile, content)
}

function prefixGeneratedFiles(content: string) {
  return `// DO NOT EDIT MANUALLY
// This file was automatically generated by \`processing/steps/generateTypes.ts\`
// To update, run \`docker compose up processing\`

${content}
`
}

async function autoformatTypeFiles() {
  try {
    await $`bunx prettier -w --config=/processing/.prettierrc ${TYPES_DIR} > /dev/null`
  } catch (error) {
    throw new Error(`Failed to run prettier on auto generated types: ${error}`)
  }
}
